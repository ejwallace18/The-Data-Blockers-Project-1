{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "da295aa8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dependencies and Setup\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "import numpy as np\n",
    "from scipy.stats import linregress"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "15b0bfe4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# make paths and read csv raw data\n",
    "data_path = \"Resources/imdb.csv\"\n",
    "\n",
    "data = pd.read_csv(data_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d2c13c57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>kind</th>\n",
       "      <th>genre</th>\n",
       "      <th>rating</th>\n",
       "      <th>vote</th>\n",
       "      <th>country</th>\n",
       "      <th>language</th>\n",
       "      <th>runtime</th>\n",
       "      <th>cast</th>\n",
       "      <th>director</th>\n",
       "      <th>composer</th>\n",
       "      <th>writer</th>\n",
       "      <th>runtimes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Dinosaur Planet</td>\n",
       "      <td>2003.0</td>\n",
       "      <td>tv mini series</td>\n",
       "      <td>['Documentary', 'Animation', 'Family']</td>\n",
       "      <td>7.7</td>\n",
       "      <td>474.0</td>\n",
       "      <td>['United States']</td>\n",
       "      <td>['English']</td>\n",
       "      <td>['50']</td>\n",
       "      <td>['Christian Slater', 'Scott Sampson']</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>['Mike Carrol', 'Mike Carroll', 'Georgann Kane']</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Character</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>movie</td>\n",
       "      <td>['Crime', 'Horror', 'Thriller']</td>\n",
       "      <td>8.3</td>\n",
       "      <td>46.0</td>\n",
       "      <td>['Japan']</td>\n",
       "      <td>['Japanese']</td>\n",
       "      <td>['125']</td>\n",
       "      <td>['Masaki Suda', 'Fukase', 'Mitsuki Takahata', ...</td>\n",
       "      <td>['Akira Nagai']</td>\n",
       "      <td>['Youki Kojima']</td>\n",
       "      <td>['Takashi Nagasaki', 'Takashi Nagasaki', 'Anna...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Get Up and Dance!</td>\n",
       "      <td>1994.0</td>\n",
       "      <td>video movie</td>\n",
       "      <td>['Family']</td>\n",
       "      <td>8.1</td>\n",
       "      <td>18.0</td>\n",
       "      <td>['United States']</td>\n",
       "      <td>['English']</td>\n",
       "      <td>['54']</td>\n",
       "      <td>['Paula Abdul', 'Aurorah Allain', 'Bill Bohl',...</td>\n",
       "      <td>['Steve Purcell']</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>The Rise and Fall of El Chapo</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>tv movie</td>\n",
       "      <td>['Documentary']</td>\n",
       "      <td>6.9</td>\n",
       "      <td>42.0</td>\n",
       "      <td>['United States']</td>\n",
       "      <td>NaN</td>\n",
       "      <td>['85']</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Sick - IMDb</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>['Thriller']</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>['United States']</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>['Marc Menchaca', 'Gideon Adlon', 'Dylan Spray...</td>\n",
       "      <td>['John Hyams']</td>\n",
       "      <td>NaN</td>\n",
       "      <td>['Katelyn Crabb', 'Kevin Williamson']</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0                          title    year            kind  \\\n",
       "0           0                Dinosaur Planet  2003.0  tv mini series   \n",
       "1           1                      Character  2021.0           movie   \n",
       "2           2              Get Up and Dance!  1994.0     video movie   \n",
       "3           3  The Rise and Fall of El Chapo  2016.0        tv movie   \n",
       "4           4                    Sick - IMDb     NaN             NaN   \n",
       "\n",
       "                                    genre  rating   vote            country  \\\n",
       "0  ['Documentary', 'Animation', 'Family']     7.7  474.0  ['United States']   \n",
       "1         ['Crime', 'Horror', 'Thriller']     8.3   46.0          ['Japan']   \n",
       "2                              ['Family']     8.1   18.0  ['United States']   \n",
       "3                         ['Documentary']     6.9   42.0  ['United States']   \n",
       "4                            ['Thriller']     NaN    NaN  ['United States']   \n",
       "\n",
       "       language  runtime                                               cast  \\\n",
       "0   ['English']   ['50']              ['Christian Slater', 'Scott Sampson']   \n",
       "1  ['Japanese']  ['125']  ['Masaki Suda', 'Fukase', 'Mitsuki Takahata', ...   \n",
       "2   ['English']   ['54']  ['Paula Abdul', 'Aurorah Allain', 'Bill Bohl',...   \n",
       "3           NaN   ['85']                                                NaN   \n",
       "4           NaN      NaN  ['Marc Menchaca', 'Gideon Adlon', 'Dylan Spray...   \n",
       "\n",
       "            director          composer  \\\n",
       "0                NaN               NaN   \n",
       "1    ['Akira Nagai']  ['Youki Kojima']   \n",
       "2  ['Steve Purcell']               NaN   \n",
       "3                NaN               NaN   \n",
       "4     ['John Hyams']               NaN   \n",
       "\n",
       "                                              writer runtimes  \n",
       "0   ['Mike Carrol', 'Mike Carroll', 'Georgann Kane']      NaN  \n",
       "1  ['Takashi Nagasaki', 'Takashi Nagasaki', 'Anna...      NaN  \n",
       "2                                                NaN      NaN  \n",
       "3                                                NaN      NaN  \n",
       "4              ['Katelyn Crabb', 'Kevin Williamson']      NaN  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c041e766",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>rating</th>\n",
       "      <th>vote</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Dinosaur Planet</td>\n",
       "      <td>2003.0</td>\n",
       "      <td>7.7</td>\n",
       "      <td>474.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Character</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>8.3</td>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Get Up and Dance!</td>\n",
       "      <td>1994.0</td>\n",
       "      <td>8.1</td>\n",
       "      <td>18.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>The Rise and Fall of El Chapo</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>6.9</td>\n",
       "      <td>42.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Sick - IMDb</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           title    year  rating   vote\n",
       "0                Dinosaur Planet  2003.0     7.7  474.0\n",
       "1                      Character  2021.0     8.3   46.0\n",
       "2              Get Up and Dance!  1994.0     8.1   18.0\n",
       "3  The Rise and Fall of El Chapo  2016.0     6.9   42.0\n",
       "4                    Sick - IMDb     NaN     NaN    NaN"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#get needed columns\n",
    "year_data_df = data[['title','year','rating','vote']]\n",
    "\n",
    "year_data_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4877018f",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'year_data_df' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-51619e9c8165>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0myear_data_df\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0myear_data_df\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0myear_data_df\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m20\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'year_data_df' is not defined"
     ]
    }
   ],
   "source": [
    "#drop and null values\n",
    "year_data_df = year_data_df.dropna()\n",
    "\n",
    "\n",
    "year_data_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0d149d3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# dropping ALL duplicate values\n",
    "year_data_df.drop_duplicates(subset =\"title\", keep = 'first', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "897a7007",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1914.0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check for earliest date\n",
    "earliestyear = year_data_df['year'].min()\n",
    "earliestyear"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a3b697c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#create the bins to separate the age group and label the bins\n",
    "bins = [0, 1939.9, 1949.9, 1959.9, 1969.9, 1979.9, 1989.9, 1999.9, 2009.9, 2019.9, 3000]\n",
    "bin_names = [\"Before 1940\", \"1940-1950\", \"1950-1960\", \"1960-1970\", \"1970-1980\", \"1980-1990\", \"1990-2000\", \"2000-2010\", \"2010-2020\", \"Post 2020\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5a030d1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>rating</th>\n",
       "      <th>vote</th>\n",
       "      <th>Year Group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Dinosaur Planet</td>\n",
       "      <td>2003.0</td>\n",
       "      <td>7.7</td>\n",
       "      <td>474.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Character</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>8.3</td>\n",
       "      <td>46.0</td>\n",
       "      <td>Post 2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Get Up and Dance!</td>\n",
       "      <td>1994.0</td>\n",
       "      <td>8.1</td>\n",
       "      <td>18.0</td>\n",
       "      <td>1990-2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>The Rise and Fall of El Chapo</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>6.9</td>\n",
       "      <td>42.0</td>\n",
       "      <td>2010-2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>8 Man</td>\n",
       "      <td>1992.0</td>\n",
       "      <td>5.5</td>\n",
       "      <td>93.0</td>\n",
       "      <td>1990-2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>What the #$*! Do We (K)now!?</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>5.3</td>\n",
       "      <td>13432.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Class of Nuke 'Em High Part II: Subhumanoid Me...</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2177.0</td>\n",
       "      <td>1990-2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>The Fighter</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>7.8</td>\n",
       "      <td>351199.0</td>\n",
       "      <td>2010-2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Neil Diamond: Greatest Hits Live</td>\n",
       "      <td>1988.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>1980-1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>7 Seconds</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>4.8</td>\n",
       "      <td>7153.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>By Dawn's Early Light</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>7.1</td>\n",
       "      <td>2898.0</td>\n",
       "      <td>1990-2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Seeta Aur Geeta</td>\n",
       "      <td>1972.0</td>\n",
       "      <td>6.8</td>\n",
       "      <td>1818.0</td>\n",
       "      <td>1970-1980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Strange Relations</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>7.6</td>\n",
       "      <td>768.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Sesame Street Presents: The Street We Live On</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>7.2</td>\n",
       "      <td>67.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Lilo and Stitch</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>7.2</td>\n",
       "      <td>22.0</td>\n",
       "      <td>2010-2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Boycott</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>7.2</td>\n",
       "      <td>901.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Meat Loaf: Bat Out of Hell</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>7.7</td>\n",
       "      <td>286.0</td>\n",
       "      <td>1990-2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Aqua Teen Hunger Force</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>7.6</td>\n",
       "      <td>23785.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>FernGully 2: The Magical Rescue</td>\n",
       "      <td>1998.0</td>\n",
       "      <td>4.6</td>\n",
       "      <td>1484.0</td>\n",
       "      <td>1990-2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Lady Chatterley</td>\n",
       "      <td>1993.0</td>\n",
       "      <td>6.9</td>\n",
       "      <td>1605.0</td>\n",
       "      <td>1990-2000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                title    year  rating  \\\n",
       "0                                     Dinosaur Planet  2003.0     7.7   \n",
       "1                                           Character  2021.0     8.3   \n",
       "2                                   Get Up and Dance!  1994.0     8.1   \n",
       "3                       The Rise and Fall of El Chapo  2016.0     6.9   \n",
       "5                                               8 Man  1992.0     5.5   \n",
       "6                        What the #$*! Do We (K)now!?  2004.0     5.3   \n",
       "7   Class of Nuke 'Em High Part II: Subhumanoid Me...  1991.0     4.5   \n",
       "8                                         The Fighter  2010.0     7.8   \n",
       "11                   Neil Diamond: Greatest Hits Live  1988.0     8.0   \n",
       "12                                          7 Seconds  2005.0     4.8   \n",
       "13                              By Dawn's Early Light  1990.0     7.1   \n",
       "14                                    Seeta Aur Geeta  1972.0     6.8   \n",
       "15                                  Strange Relations  2001.0     7.6   \n",
       "16      Sesame Street Presents: The Street We Live On  2004.0     7.2   \n",
       "17                                    Lilo and Stitch  2012.0     7.2   \n",
       "18                                            Boycott  2001.0     7.2   \n",
       "19                         Meat Loaf: Bat Out of Hell  1999.0     7.7   \n",
       "20                             Aqua Teen Hunger Force  2000.0     7.6   \n",
       "21                    FernGully 2: The Magical Rescue  1998.0     4.6   \n",
       "22                                    Lady Chatterley  1993.0     6.9   \n",
       "\n",
       "        vote Year Group  \n",
       "0      474.0  2000-2010  \n",
       "1       46.0  Post 2020  \n",
       "2       18.0  1990-2000  \n",
       "3       42.0  2010-2020  \n",
       "5       93.0  1990-2000  \n",
       "6    13432.0  2000-2010  \n",
       "7     2177.0  1990-2000  \n",
       "8   351199.0  2010-2020  \n",
       "11      81.0  1980-1990  \n",
       "12    7153.0  2000-2010  \n",
       "13    2898.0  1990-2000  \n",
       "14    1818.0  1970-1980  \n",
       "15     768.0  2000-2010  \n",
       "16      67.0  2000-2010  \n",
       "17      22.0  2010-2020  \n",
       "18     901.0  2000-2010  \n",
       "19     286.0  1990-2000  \n",
       "20   23785.0  2000-2010  \n",
       "21    1484.0  1990-2000  \n",
       "22    1605.0  1990-2000  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#add column to dataframe that describes that shows bins\n",
    "year_data_df[\"Year Group\"] = pd.cut(year_data_df[\"year\"], bins, labels=bin_names, include_lowest=True)\n",
    "year_data_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8a1c01f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#GRAPH FOR DISTRIBUTION OF YEARS\n",
    "#group by year group\n",
    "yeargroup_df = year_data_df.groupby(['Year Group'])\n",
    "\n",
    "ygcount_df = pd.DataFrame(yeargroup_df['year'].count())\n",
    "\n",
    "#create bar chart\n",
    "yeargroup_bar = ygcount_df.plot(kind=\"bar\", title=\"Distribution of Movies by Year\", color=\"red\", legend=False)\n",
    "\n",
    "#label the chart\n",
    "yeargroup_bar.set_xlabel(\"Years\")\n",
    "yeargroup_bar.set_ylabel(\"Number of Movie\")\n",
    "plt.tight_layout\n",
    "\n",
    "plt.show\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f79e86e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>rating</th>\n",
       "      <th>vote</th>\n",
       "      <th>Year Group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3848</th>\n",
       "      <td>Dragon Family</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>9.6</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021</th>\n",
       "      <td>Mortal Kombat: At The Movies</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>9.5</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2010-2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7655</th>\n",
       "      <td>Band of Brothers</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>9.4</td>\n",
       "      <td>398551.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2906</th>\n",
       "      <td>The Sopranos: Season 6 Invitation to the Set</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>9.4</td>\n",
       "      <td>47.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1185</th>\n",
       "      <td>Widespread Panic: The Earth Will Swallow You</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>9.3</td>\n",
       "      <td>13.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             title    year  rating      vote  \\\n",
       "3848                                 Dragon Family  2004.0     9.6       8.0   \n",
       "2021                  Mortal Kombat: At The Movies  2012.0     9.5       6.0   \n",
       "7655                              Band of Brothers  2001.0     9.4  398551.0   \n",
       "2906  The Sopranos: Season 6 Invitation to the Set  2005.0     9.4      47.0   \n",
       "1185  Widespread Panic: The Earth Will Swallow You  2002.0     9.3      13.0   \n",
       "\n",
       "     Year Group  \n",
       "3848  2000-2010  \n",
       "2021  2010-2020  \n",
       "7655  2000-2010  \n",
       "2906  2000-2010  \n",
       "1185  2000-2010  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#sort data by rating\n",
    "topmovies_df = year_data_df.sort_values(\"rating\", ascending=False)\n",
    "\n",
    "topmovies_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5229eadf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#GRAPH FOR AVERAGE VOTES PER MOVIE BY YEAR\n",
    "topyear_df = topmovies_df.groupby(['Year Group'])\n",
    "\n",
    "tycount_df = pd.DataFrame(topyear_df['vote'].mean())\n",
    "\n",
    "#create bar chart\n",
    "top25_bar = tycount_df.plot(kind=\"bar\", title=\"Average Votes per Movie by Year\", color=\"red\", legend=False)\n",
    "\n",
    "#label the chart\n",
    "top25_bar.set_xlabel(\"Years\")\n",
    "top25_bar.set_ylabel(\"Average Votes per Movie\")\n",
    "plt.tight_layout\n",
    "\n",
    "plt.show\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9b28e22b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>rating</th>\n",
       "      <th>vote</th>\n",
       "      <th>Year Group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3848</th>\n",
       "      <td>Dragon Family</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>9.6</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021</th>\n",
       "      <td>Mortal Kombat: At The Movies</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>9.5</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2010-2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7655</th>\n",
       "      <td>Band of Brothers</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>9.4</td>\n",
       "      <td>398551.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2906</th>\n",
       "      <td>The Sopranos: Season 6 Invitation to the Set</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>9.4</td>\n",
       "      <td>47.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1185</th>\n",
       "      <td>Widespread Panic: The Earth Will Swallow You</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>9.3</td>\n",
       "      <td>13.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>698</th>\n",
       "      <td>Yanni: Live at the Acropolis</td>\n",
       "      <td>1994.0</td>\n",
       "      <td>9.3</td>\n",
       "      <td>410.0</td>\n",
       "      <td>1990-2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>652</th>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>1994.0</td>\n",
       "      <td>9.3</td>\n",
       "      <td>2461873.0</td>\n",
       "      <td>1990-2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2807</th>\n",
       "      <td>Queensrÿche: Operation Livecrime</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>9.3</td>\n",
       "      <td>146.0</td>\n",
       "      <td>1990-2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>282</th>\n",
       "      <td>Blue Planet II</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>9.3</td>\n",
       "      <td>36474.0</td>\n",
       "      <td>2010-2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2600</th>\n",
       "      <td>Pride 25: Body Blow</td>\n",
       "      <td>2003.0</td>\n",
       "      <td>9.3</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3360</th>\n",
       "      <td>311: Live in Concert, New Orleans - 3-11 Day 2004</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>9.3</td>\n",
       "      <td>113.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1224</th>\n",
       "      <td>Smallville Season 3 Promo</td>\n",
       "      <td>2003.0</td>\n",
       "      <td>9.2</td>\n",
       "      <td>58.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9183</th>\n",
       "      <td>Depeche Mode: Devotional</td>\n",
       "      <td>1993.0</td>\n",
       "      <td>9.2</td>\n",
       "      <td>914.0</td>\n",
       "      <td>1990-2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7475</th>\n",
       "      <td>The World at War</td>\n",
       "      <td>1973.0</td>\n",
       "      <td>9.2</td>\n",
       "      <td>23729.0</td>\n",
       "      <td>1970-1980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4662</th>\n",
       "      <td>Behind the Scenes: One Tree Hill Season 6</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>9.2</td>\n",
       "      <td>43.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1657</th>\n",
       "      <td>The Godfather</td>\n",
       "      <td>1972.0</td>\n",
       "      <td>9.2</td>\n",
       "      <td>1702698.0</td>\n",
       "      <td>1970-1980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7065</th>\n",
       "      <td>Roy Orbison: Black and White Night 30</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>9.2</td>\n",
       "      <td>52.0</td>\n",
       "      <td>2010-2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>753</th>\n",
       "      <td>Dream Theater: Live at Budokan</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>9.2</td>\n",
       "      <td>713.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6047</th>\n",
       "      <td>The Lex Series Laptop</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>9.2</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2010-2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5317</th>\n",
       "      <td>Baseball</td>\n",
       "      <td>1994.0</td>\n",
       "      <td>9.2</td>\n",
       "      <td>4028.0</td>\n",
       "      <td>1990-2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7187</th>\n",
       "      <td>Nine Inch Nails Live: And All That Could Have ...</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>9.2</td>\n",
       "      <td>1251.0</td>\n",
       "      <td>2000-2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4812</th>\n",
       "      <td>Game of Thrones</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>9.2</td>\n",
       "      <td>1873254.0</td>\n",
       "      <td>2010-2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3812</th>\n",
       "      <td>Pizza Delivery/Home Sweet Pineapple</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>9.2</td>\n",
       "      <td>1441.0</td>\n",
       "      <td>1990-2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6558</th>\n",
       "      <td>Selena Live: The Last Concert</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>9.2</td>\n",
       "      <td>175.0</td>\n",
       "      <td>1990-2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2277</th>\n",
       "      <td>Carly Simon Live from Martha's Vineyard</td>\n",
       "      <td>1987.0</td>\n",
       "      <td>9.1</td>\n",
       "      <td>17.0</td>\n",
       "      <td>1980-1990</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  title    year  rating  \\\n",
       "3848                                      Dragon Family  2004.0     9.6   \n",
       "2021                       Mortal Kombat: At The Movies  2012.0     9.5   \n",
       "7655                                   Band of Brothers  2001.0     9.4   \n",
       "2906       The Sopranos: Season 6 Invitation to the Set  2005.0     9.4   \n",
       "1185       Widespread Panic: The Earth Will Swallow You  2002.0     9.3   \n",
       "698                        Yanni: Live at the Acropolis  1994.0     9.3   \n",
       "652                            The Shawshank Redemption  1994.0     9.3   \n",
       "2807                   Queensrÿche: Operation Livecrime  1991.0     9.3   \n",
       "282                                      Blue Planet II  2017.0     9.3   \n",
       "2600                                Pride 25: Body Blow  2003.0     9.3   \n",
       "3360  311: Live in Concert, New Orleans - 3-11 Day 2004  2004.0     9.3   \n",
       "1224                          Smallville Season 3 Promo  2003.0     9.2   \n",
       "9183                           Depeche Mode: Devotional  1993.0     9.2   \n",
       "7475                                   The World at War  1973.0     9.2   \n",
       "4662          Behind the Scenes: One Tree Hill Season 6  2009.0     9.2   \n",
       "1657                                      The Godfather  1972.0     9.2   \n",
       "7065              Roy Orbison: Black and White Night 30  2017.0     9.2   \n",
       "753                      Dream Theater: Live at Budokan  2004.0     9.2   \n",
       "6047                              The Lex Series Laptop  2019.0     9.2   \n",
       "5317                                           Baseball  1994.0     9.2   \n",
       "7187  Nine Inch Nails Live: And All That Could Have ...  2002.0     9.2   \n",
       "4812                                    Game of Thrones  2011.0     9.2   \n",
       "3812                Pizza Delivery/Home Sweet Pineapple  1999.0     9.2   \n",
       "6558                      Selena Live: The Last Concert  1995.0     9.2   \n",
       "2277            Carly Simon Live from Martha's Vineyard  1987.0     9.1   \n",
       "\n",
       "           vote Year Group  \n",
       "3848        8.0  2000-2010  \n",
       "2021        6.0  2010-2020  \n",
       "7655   398551.0  2000-2010  \n",
       "2906       47.0  2000-2010  \n",
       "1185       13.0  2000-2010  \n",
       "698       410.0  1990-2000  \n",
       "652   2461873.0  1990-2000  \n",
       "2807      146.0  1990-2000  \n",
       "282     36474.0  2010-2020  \n",
       "2600        8.0  2000-2010  \n",
       "3360      113.0  2000-2010  \n",
       "1224       58.0  2000-2010  \n",
       "9183      914.0  1990-2000  \n",
       "7475    23729.0  1970-1980  \n",
       "4662       43.0  2000-2010  \n",
       "1657  1702698.0  1970-1980  \n",
       "7065       52.0  2010-2020  \n",
       "753       713.0  2000-2010  \n",
       "6047        8.0  2010-2020  \n",
       "5317     4028.0  1990-2000  \n",
       "7187     1251.0  2000-2010  \n",
       "4812  1873254.0  2010-2020  \n",
       "3812     1441.0  1990-2000  \n",
       "6558      175.0  1990-2000  \n",
       "2277       17.0  1980-1990  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top25_df = topmovies_df[:25]\n",
    "\n",
    "top25_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd64e0b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
